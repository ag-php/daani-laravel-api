extend type Query {
    users: [User!]! @paginate(defaultCount: 10)
    me: User @auth(guard:"api")

}


extend type Mutation {
    register(email : String @rules(apply: ["required","string","email","unique:users,email"]),
    password : String @rules(apply: ["required","string"])) : User @field(resolver: "Auth\\Register")
    login(email: String!, password: String): User @field(resolver:"Auth\\Login")
    verifyRegistration(token:String!): User @field(resolver:"Auth\\VerifyRegistration")
    validateResetToken(token:String!): Boolean @field(resolver:"Auth\\ValidateResetToken")
    loginWithFacebook(user_id: String!, token: String!): User @field(resolver:"Auth\\LoginWithFacebook")
    updateUser(data: UpdateUserInput @spread) : User @middleware(checks: ["auth:api"]) @field(resolver:"User\\Update")
    forgotPassword(email:String!): Boolean @field(resolver:"Auth\\ForgotPassword")
    resetPassword(token: String!,password:String!): Boolean @field(resolver:"Auth\\ResetPassword")
    requestEmailVerificationLink(email:String!): Boolean @field(resolver:"Auth\\RequestEmailVerificationLink")


}

input UpdateUserInput {
    name: String,
    password: String,
    phone_number: String,
    address: String
}

type PublicUser {
    id: ID!
    name: String
    email: String!
    phone_number: String
    address: String
    created_at: DateTime!
    products(filter: ProductFilter): [Product!]! @hasMany(type:"paginator",scopes:["filter"])
}

type User {
    id: ID!
    name: String
    email: String
    phone_number: String
    address: String
    api_token: String!
    created_at: DateTime!
    updated_at: DateTime!
    products(filter: ProductFilter): [Product!]! @hasMany(type:"paginator",scopes:["filter"])
}
