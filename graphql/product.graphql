extend type Query {
     products: [Product!]! @paginate(defaultCount: 10)
}

extend type Mutation @middleware(checks: ["auth:api"]){
    addProduct(input:CreateProduct !@spread): Product @field(resolver:"Product\\Create") @inject(context: "user.id", name: "user_id")
    updateProduct(id: ID!,input:UpdateProduct! @spread): Product @can(ability:"update",injectArgs: true,find:"id") @update
    deleteProduct(id: ID!): Product @can(ability:"delete",injectArgs: true,find:"id") @delete
    sold(id: ID!): Product @can(ability:"update",injectArgs: true,find:"id") @field(resolver:"Product\\Sold")
}

input CreateProduct{
    name: String! @rules(apply: ["string"])
    address: String @rules(apply: ["string"])
    used_for: String @rules(apply: ["string"])
    home_delivery: Int
    cat_id: Int! @rules(apply: ["exists:product_categories,id"])
    description: String

}

input UpdateProduct{
    name: String
    description: String
    address: String
    cat_id: Int @rules(apply: ["exists:product_categories,id"])
    description: String
    used_for: String
}


type Product {
    id: ID!
    name: String!
    description: String
    address: String!
    used_for: String!
    home_delivery: String!
    is_available: Int!
    user: User
    category: ProductCategory
}
